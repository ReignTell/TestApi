// Load IntaSend Library
const IntaSend = require('intasend-node');

// Initialize IntaSend with keys stored in PlayFab Title Data
function initIntaSend() {
  const publishableKey = process.env.PUBLISHABLE_KEY;
  const secretKey = process.env.SECRET_KEY;
  const isTestEnv = process.env.TEST_ENV === 'true'; // set this in your PlayFab settings as 'true' or 'false'

  return new IntaSend(publishableKey, secretKey, isTestEnv);
}

// Wallet Creation
exports.createWallet = async (label, walletType = 'WORKING', currency = 'KES', canDisburse = true) => {
  const intasend = initIntaSend();
  try {
    const wallet = await intasend.wallets().create({ label, wallet_type: walletType, currency, can_disburse: canDisburse });
    return { success: true, data: wallet };
  } catch (error) {
    console.error("Wallet Creation Error:", error);
    return { success: false, error };
  }
};

// Retrieve Recent Transactions
exports.getRecentTransactions = async (walletId) => {
  const intasend = initIntaSend();
  try {
    const transactions = await intasend.wallets().transactions(walletId);
    return { success: true, data: transactions };
  } catch (error) {
    console.error("Transaction Retrieval Error:", error);
    return { success: false, error };
  }
};

// Deposit (Fund Wallet via Checkout)
exports.fundCheckout = async (userInfo, amount, currency, walletId, apiRef, redirectUrl) => {
  const intasend = initIntaSend();
  try {
    const response = await intasend.wallets().fundCheckout({
      ...userInfo,
      host: 'https://yourwebsite.com',
      amount,
      currency,
      api_ref: apiRef,
      redirect_url: redirectUrl,
      wallet_id: walletId,
    });
    return { success: true, data: response };
  } catch (error) {
    console.error("Deposit Error:", error);
    return { success: false, error };
  }
};

// Internal Transfer (User to User)
exports.internalTransfer = async (sourceWalletId, destinationWalletId, amount, narrative) => {
  const intasend = initIntaSend();
  try {
    const response = await intasend.wallets().intraTransfer(sourceWalletId, destinationWalletId, amount, narrative);
    return { success: true, data: response };
  } catch (error) {
    console.error("Internal Transfer Error:", error);
    return { success: false, error };
  }
};

// Withdraw (External Transfer)
exports.externalTransfer = async (walletId, amount, narrative) => {
  const intasend = initIntaSend();
  try {
    const response = await intasend.wallets().intraTransfer(walletId, null, amount, narrative);
    return { success: true, data: response };
  } catch (error) {
    console.error("External Transfer Error:", error);
    return { success: false, error };
  }
};

// Transaction Status
exports.getTransactionStatus = async (trackingId) => {
  const intasend = initIntaSend();
  try {
    const status = await intasend.payouts().status({ tracking_id: trackingId });
    return { success: true, data: status };
  } catch (error) {
    console.error("Transaction Status Error:", error);
    return { success: false, error };
  }
};
